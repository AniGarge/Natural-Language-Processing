import nltk
from nltk.corpus import PlaintextCorpusReader
from bs4 import BeautifulSoup
from nltk import FreqDist
from nltk.collocations import *
from nltk.corpus import nps_chat

corpus=PlaintextCorpusReader('.','.*\.txt')

text=corpus.raw('WikipediaDiscussions.txt')

soup=BeautifulSoup(text)
text=soup.get_text()

tokens=nltk.word_tokenize(text)

words=[w.lower() for w in tokens if w.isalpha()]

stopwords=nltk.corpus.stopwords.words('english')

new_words=[w for w in words if w not in stopwords]

fd=FreqDist(new_words)
top50=fd.most_common(50)

for w in top50:
   print(w[0],w[1])

for w in top50:
   print(w[0],w[1]/len(tokens))

bigram_measures=nltk.collocations.BigramAssocMeasures()
finder=BigramCollocationFinder.from_words(words)
scored=finder.score_ngrams(bigram_measures.raw_freq)
scored[:50]

finder.apply_word_filter(lambda w: w in stopwords)
scored=finder.score_ngrams(bigram_measures.raw_freq)
scored[:50]

finder1=BigramCollocationFinder.from_words(words)
finder1.apply_freq_filter(5)
scored1=finder1.score_ngrams(bigram_measures.pmi)
scored1[:50]


chat_text=nps_chat.raw()

chat_text=BeautifulSoup(chat_text)
chat_text=chat_text.get_text()

chat_text=BeautifulSoup(chat_text)
chat_text=chat_text.get_text()

chat_tokens=nltk.word_tokenize(chat_text)
chat_words=[w.lower() for w in chat_tokens if w.isalpha() ]

chat_new_words=[w for w in chat_words if w not in stopwords]

fd_chat=FreqDist(chat_new_words)
top50_chat=fd_chat.most_common(50)

for w in top50_chat:
  print(w[0],w[1])

for w in top50_chat:
  print(w[0],w[1]/len(chat_tokens))

finder_chat=BigramCollocationFinder.from_words(chat_new_words)
scored_chat=finder_chat.score_ngrams(bigram_measures.raw_freq)

for w in  scored_chat[:50]:
  print(w)

finder_chat.apply_freq_filter(5)
scored_chat=finder_chat.score_ngrams(bigram_measures.pmi)

for w in scored_chat[:50]:
  print(w)

puzzle_letters=nltk.FreqDist('egbdafkjlmorcnst')
obligatory='m'

wordlist=nltk.corpus.words.words()

[w for w in wordlist if len(w)>=6 and obligatory in w and nltk.FreqDist(w)<=puzzle_letters]
